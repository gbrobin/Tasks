swirl()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
filecreate("mytest.R")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("mytest3",fsep=.Platform$mytest3.r.sep)
args("testdir")
args("file.path")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
old.dir
setwd(old.dir)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq<-seq(5,10,length=30)
length("my_seq")
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char, "Garrett")
my_name
paste(my_name, collapse=" ")
past("Hello", "world!", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
library(swirl)
ls()
rm(list=ls())
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5=7)
!5=7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){1}, c(8,4,0))
info()
?index
??index
evaluate(function(x)(x[1]))
evaluate(function(x)(x[1]), c(8,4,0))
evaluate(function(x)(x[3]), c(8,4,0))
evaluate(function(x)(x[length(x)]), c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Too","much","anxiety","for","this")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["my car,"]]
adjective<-args[["peppery,"]]
noun<-args[["shack,"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["my car,"]]
adjective<-args[["peppery,"]]
noun<-args[["shack,"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs("Bavaria","peppery","shack")
submit()
submit()
submit()
"I"%p%"love"%p%"R"
"I"%p%"love"%p%"R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=speed,y=dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed,y=cars$dist, "Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
play()
?mtcars
nxt()
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mph)
hist(mtcars$mpg)
Data <- read.csv("http:\\jonsmitchell.com/data/beren.csv")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv")
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[1,]
Data[2,]
Data[1:3]
Data[1:3, 4]
Data[1:5, 1:3]
Data[1:3, 1:257]
Data[257, 1:3]
Feeds <-which(beren[,9] == "bottle")
Feeds <-which(beren[9] == "bottle")
Feeds <-which(Data[9] == "bottle")
berenMilk <- Data[Feeds]
Feeds <-which(Data[9] == "bottle")
which(Data[9] == "bottle")
Feeds <-which(Data[,9] == "bottle")
Feeds
beren <- Data
Feeds <-which(Data[,9] == "bottle")
berenMilk <- beren[Feeds]
berenMilk <- beren[Feeds,]
head(berenMilk)
Feeds <- which(beren[, "event"] == "bottle")
Feeds
Feeds <- which(beren$event == "bottle")
feeds
Feeds
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID(beren$event == "birth")
dateID <- sapply(dayID, as.Date, format = "%y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID(beren$event == "birth")
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%y-%m-%d", origin = "2019-04-18")
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%y-%m-%d", origin = "2019-04-18")
sRWis[`]`]
dateID[1]
dateID
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
head(dateID)
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID(beren$event == "birth")
beren$age <- dateID - dateID[beren$event == "birth"]
head(beren)
beren2 <- beren
beren3 <- beren2[order(beren$age),]
?order
head(beren)
head(beren2)
head(beren3)
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
install.packages("paleobioDB", dep=T)
setwd("C:\\Users\\yogur\\Desktop\\Evolution\\Tasks\\Task_03")
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurences(base_name=Taxon, show=c("phylo", "coords", "indent"), min_ma=MinMA, max_ma=MaxMA)
fossils <- pbdb_occurrences(base_name=Taxon, show=c("phylo", "coords", "indent"), min_ma=MinMA, max_ma=MaxMA)
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "indent"), min_ma=MinMA, max_ma=MaxMA)
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "indent"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main=Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type=1, xlab="age (millions of years ago)", ylab="num. of species", main=Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type='1', xlab="age (millions of years ago)", ylab="num. of species", main=Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main=Taxon)
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5, 0.5, 0))
plot(seq(to=MaxMA, from=MinMA, length.out = nrow(newspeciesOverTime)), newspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main=Taxon)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,2], col='red')
legend("topleft", legend=c("first appear", "go extinct"), col=c('black', 'red'), lty=1, bty="n")
OceanCol <- "light blue"
LandCol <- "black"
Cols <- c('#fee5d9', '#fcae91', '#fb6a4a', '#de2d26', '#a50f15')
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int=LandCol, col.rich=Cols)
MinMA <- 201
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 66
MaxMA <- 145
cretaceous_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(triassic_fossils, col.ocean = OceanCol, col.int = LandCol, col.rich = Cols)
mtext(side = 3, "Triassic (252-201Ma)", cex=3, line=-2)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(jurassic_fossils, col.ocean = OceanCol, col.int = LandCol, col.rich = Cols)
mtext(side = 3, "Jurassic (201-145Ma)", cex=3, line=-2)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(cretaceous_fossils, col.ocean = OceanCol, col.int = LandCol, col.rich = Cols)
mtext(side = 3, "Cretaceous (145-66Ma)", cex=3, line=-2)
Taxon2 <- "Mammalia"
MinMA <- 66
MaxMA <- 252
fossils2 <- pdbd(base_name = Taxon2, show=("phylo", "coords", "ident") min_ma=MinMA, max_ma=MaxMA)
Taxon2 <- "Mammalia"
MinMA <- 66
MaxMA <- 252
fossils2 <- pdbd(base_name = Taxon2, show=("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon2 <- "Mammalia"
MinMA <- 66
MaxMA <- 252
fossils2 <- pdbd(base_name = Taxon2, show=c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon2 <- "Mammalia"
MinMA <- 66
MaxMA <- 252
fossils2 <- pbdb(base_name = Taxon2, show=c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils2 <- pbdb_occurences(base_name = Taxon2, show=c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils2 <- pbdb_occurrences(base_name = Taxon2, show=c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime2 <- pbdb_richness(fossils2, rank="genus", temporal_extent=c(MaxMA, MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
Col_dino <- Cols[length(Cols)]
Col_mammal <- Cols [1]
LineWidth <- 2
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime2)), nspeciesOverTime2[,2], col=Col_mammal, lwd=LineWidth)
legend("topleft", legend=c(Taxon, Taxon2), col=c(Col_dino, Col_mammal), bty="n", lwd=LineWidth)
Taxon2 <- "Mammalia"
MinMA <- 66
MaxMA <- 252
fossils2 <- pbdb_occurrences(base_name = Taxon2, show=c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime2 <- pbdb_richness(fossils2, rank="genus", temporal_extent=c(MaxMA, MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
Col_dino <- Cols[length(Cols)]
Col_mammal <- Cols [1]
LineWidth <- 2
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime2)), nspeciesOverTime2[,2], col=Col_mammal, lwd=LineWidth)
legend("topleft", legend=c(Taxon, Taxon2), col=c(Col_dino, Col_mammal), bty="n", lwd=LineWidth)
