num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char, "Garrett")
my_name
paste(my_name, collapse=" ")
past("Hello", "world!", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
library(swirl)
ls()
rm(list=ls())
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5=7)
!5=7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){1}, c(8,4,0))
info()
?index
??index
evaluate(function(x)(x[1]))
evaluate(function(x)(x[1]), c(8,4,0))
evaluate(function(x)(x[3]), c(8,4,0))
evaluate(function(x)(x[length(x)]), c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Too","much","anxiety","for","this")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["my car,"]]
adjective<-args[["peppery,"]]
noun<-args[["shack,"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["my car,"]]
adjective<-args[["peppery,"]]
noun<-args[["shack,"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs("Bavaria","peppery","shack")
submit()
submit()
submit()
"I"%p%"love"%p%"R"
"I"%p%"love"%p%"R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=speed,y=dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed,y=cars$dist, "Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
play()
?mtcars
nxt()
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mph)
hist(mtcars$mpg)
Data <- read.csv("http:\\jonsmitchell.com/data/beren.csv")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv")
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[1,]
Data[2,]
Data[1:3]
Data[1:3, 4]
Data[1:5, 1:3]
Data[1:3, 1:257]
Data[257, 1:3]
Feeds <-which(beren[,9] == "bottle")
Feeds <-which(beren[9] == "bottle")
Feeds <-which(Data[9] == "bottle")
berenMilk <- Data[Feeds]
Feeds <-which(Data[9] == "bottle")
which(Data[9] == "bottle")
Feeds <-which(Data[,9] == "bottle")
Feeds
beren <- Data
Feeds <-which(Data[,9] == "bottle")
berenMilk <- beren[Feeds]
berenMilk <- beren[Feeds,]
head(berenMilk)
Feeds <- which(beren[, "event"] == "bottle")
Feeds
Feeds <- which(beren$event == "bottle")
feeds
Feeds
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID(beren$event == "birth")
dateID <- sapply(dayID, as.Date, format = "%y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID(beren$event == "birth")
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%y-%m-%d", origin = "2019-04-18")
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%y-%m-%d", origin = "2019-04-18")
sRWis[`]`]
dateID[1]
dateID
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
head(dateID)
dayID <- apply(beren, 1, function(x) paste (x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID(beren$event == "birth")
beren$age <- dateID - dateID[beren$event == "birth"]
head(beren)
beren2 <- beren
beren3 <- beren2[order(beren$age),]
?order
head(beren)
head(beren2)
head(beren3)
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
# makes two populations that use variables in the
# arguments to make it easier to shift values around
# later
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
# once again, setting the numeric input to an
# easily-changeable variable
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus)) / length(Focus)
ToMom
ToMomMom <- length(grep( "grandpa_mom", Focus))/length(Focus)
ToMomMom <- length(grep( "grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep( "grandpa_mom", Focus))/length(Focus)
ToMomMom
ToMomDad
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus)) / length(Focus)
# Looks through everything with "mom" in it for
# things that match with Focus. Should be the full
# complement of what Focus shares with Brenda
ToMomMom <- length(grep( "grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep( "grandpa_mom", Focus))/length(Focus)
# Weirdly there's nothing in the set for
ToMomMom <- length(grep( "grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep( "grandpa_mom", Focus))/length(Focus)
ToMomMom
ToMomDad
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)
ManySiblings <- replicate(1e3, length(intersect(
Focus, makeBaby(Brenda, Alan))/length(Focus))
ManySiblings <- replicate(1e3, length(intersect(
Focus, makeBaby(Brenda, Alan)))/length(Focus))
ManySiblings <- replicate(1e3, length(intersect(
Focus, makeBaby(Brenda, Alan)))/length(Focus))
ManySiblings
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="
proportion shared genes")
HWE < function(p) {
aa <- p^2
ab <- 2*p*(1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.05)
HWE <- function(p) {
aa <- p^2
ab <- 2*p*(1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.05)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1),
xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by=0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[, "aa"], lwd=2, col="red")
lines(p, GenoFreq[, "ab"], lwd=2, col="purple")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"),
col=c("red", "purple", "blue"), lty=1, lwd=2,
bty="n")
HWE(0.05)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1),
xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by=0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[, "aa"], lwd=2, col="red")
# genotype "aa" frequency increases toward one as
# the frequency of the allele approaches one
lines(p, GenoFreq[, "ab"], lwd=2, col="purple")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"),
col=c("red", "purple", "blue"), lty=1, lwd=2,
bty="n")
HWE(0.05)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1),
xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by=0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[, "aa"], lwd=2, col="red")
# genotype "aa" frequency increases toward one as
# the frequency of the allele approaches one
lines(p, GenoFreq[, "ab"], lwd=2, col="purple")
lines(p, GenoFreq[, "bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"),
col=c("red", "purple", "blue"), lty=1, lwd=2,
bty="n")
Pop <- simPop(500)
points(Pop[, "freqa"], Pop[,"Genotypes.aa"]/500,
pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22,
bg="red")
library(learnPopGen)
source("http://jonsmitchell.com/code/simFxn04.R")
library(learnPopGen)
library(LearnPopGen)
library(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
library(learnPopGen)
library(learnPopGen)
library(learnPopGen)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
X <- genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
summary(Line)
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt~Samples + 0)
Line2
abline(Line2)
abline(Line2)
library(learnPopGen)
?coalescent.plot
coalescent.plot(n=1000, ngen=500, colors=NULL)
coalescent.plot(n=10, ngen=50, colors=NULL)
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
?coalescent.plot
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot(n=10, ngen=50, colors=NULL)
coalescent.plot(n=10, ngen=50, colors=NULL)
coalescent.plot(n=10, ngen=50, colors=NULL)
coalescent.plot(n=10, ngen=50, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
coalescent.plot(n=30, ngen=40, colors=NULL)
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot(n=20, ngen=25, colors=NULL)
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
coalescent.plot()
install.packages(coala)
library(coala)
download.packages(coala)
download.packages("coala"
download.packages("coala")
install.packages("coala")
install.packages("phytools")
install.packages("phytools")
?sumstat
??sumstat
??sumstat_
?sumstat_
model <- coal_model(sample_size=5, loci_number=10,
loci_length=500, ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
model <- coal _model(sample_size=5, loci_number=10,
loci_length=500, ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
model <- coal_model(sample_size=5, loci_number=10,
loci_length=500, ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
?coal_model
library(coala)
model <- coal_model(sample_size=5, loci_number=10,
loci_length=500, ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
model
stats <- simulate(model, nsim=1)
stats
Diversity <- stats$pi
Diversity
Nloci <- length(stats$trees)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
library(phytools)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
setwd("C:\\Users\\yogur\\Desktop\\Evolution\\Tasks\\Task_06")
pdf("Coalescent N10Ngen20", height=4, width=4)
coalescent.plot(n=10, ngen=50, colors=NULL)
dev.off()
library(learnPopGen)
setwd("C:\\Users\\yogur\\Desktop\\Evolution\\Tasks\\Task_06")
pdf("Coalescent N10Ngen20", height=4, width=4)
coalescent.plot(n=10, ngen=50, colors=NULL)
dev.off()
setwd("C:\\Users\\yogur\\Desktop\\Evolution\\Tasks\\Task_06")
pdf("Coalescent N10Ngen20.pdf", height=4, width=4)
coalescent.plot(n=10, ngen=50, colors=NULL)
dev.off()
Age1 <- max(nodHeights(t1))
library(phytools)
Age1 <- max(nodHeights(t1))
library(coala)
Age1 <- max(nodHeights(t1))
Age1 <- max(nodeHeights(t1))
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
